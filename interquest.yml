########################################################################
#              DevOps-Pro Questions and Answers
########################################################################

Practice: 11/08/23

#1- Tell me brief about yourself
    
  I'd be happy to tell you about myself. I'm a DevOps engineer with [X] years of experience in optimizing 
software delivery pipelines and ensuring the reliability of complex systems. My journey in the DevOps field 
started with a strong foundation in both software development and system administration.

  I've had the opportunity to work in various roles, from a software developer to a system administrator,
which has given me a holistic understanding of the software development lifecycle. I'm well-versed in 
continuous integration and continuous delivery (CI/CD) pipelines, automating manual tasks, and using 
Infrastructure as Code (IaC) to manage cloud environments effectively.

  Throughout my career, I've gained expertise in using popular DevOps tools and platforms such as Jenkins,
Git, Docker, Kubernetes, and AWS. I've also led initiatives to implement monitoring and alerting solutions 
to ensure the health and performance of applications. Security is a top priority for me, and I've integrated 
security practices into the DevOps process by performing automated scans and security testing.

  What really drives me in this field is the opportunity to bridge the gap between development and operations,
enabling teams to release high-quality software more rapidly and reliably. I thrive in dynamic and collaborative 
environments where I can bring a DevOps mindset to improve the software development process.

  Outside of work, I'm a constant learner and keep myself updated with the latest trends in DevOps.
I've also contributed to open-source projects and actively participate in local DevOps meetups and conferences.
In my free time, I enjoy experimenting with new technologies and sharing my knowledge with the community.

  I'm excited about the opportunity to leverage my skills and experiences to help your organization succeed in its 
DevOps journey and deliver outstanding results. Thank you for considering me for this role."

#2- How have you delivered results in your previous roles?

   "In my previous roles as a DevOps engineer, I've consistently delivered results that have significantly 
  improved the efficiency, reliability, and scalability of software development and deployment processes. 
  Here are a few key achievements from my past experiences:

  - Optimizing CI/CD Pipelines: 

In one of my previous positions, I inherited a slow and error-prone CI/CD pipeline. 
I restructured the pipeline to reduce build times by 30%, resulting in faster feedback for developers and a more
agile development process. This improvement not only saved valuable development hours but also led to a 20% increase 
in feature delivery speed.

- Implementing Infrastructure as Code (IaC): 

At another company, I introduced Infrastructure as Code (IaC) practices using Terraform to manage cloud resources. 
 This allowed us to provision and scale infrastructure with precision and consistency. As a result, we reduced 
  infrastructure provisioning time by 50%, minimized configuration drift, and eliminated human errors in the deployment process.

- Enhancing Security Posture:

 Security is a critical aspect of DevOps. In one of my roles, I integrated automated security scanning tools into
our CI/CD pipeline. This initiative led to the early detection and resolution of security vulnerabilities,
reducing the organization's exposure to potential security threats. Our improved security posture was recognized 
by stakeholders, auditors, and customers.

- Cross-Team Collaboration: 

Collaboration between development and operations teams is key to successful DevOps. I initiated cross-team meetings 
and implemented shared dashboards to enhance communication and visibility. This resulted in a 40% reduction in the number
of incidents and a 25% improvement in the mean time to resolution (MTTR) of critical issues.

- Monitoring and Alerting: 

Implementing robust monitoring and alerting solutions has been pivotal in my roles. I set up systems with Prometheus 
and Grafana to monitor application performance and health. The alerts we configured helped us identify and resolve 
issues proactively, reducing unplanned downtime by 25% and enhancing user satisfaction.

- Mentoring and Knowledge Sharing: 

I have always been passionate about knowledge sharing. In multiple organizations, I established mentorship programs and 
conducted internal workshops to upskill team members in DevOps practices. This not only improved the overall competence 
of the team but also created a culture of continuous learning.


3- How have you made good informed decisions and how did you seek this information?

  


How have you embraced and managed change?
How do you deal with stress and multiple competing priorities?
Can you give examples of communicating effectively? NIKE culture is big on personal face to
face communication, and having strong relationships with team members and
internal/external customers.

1. 
2. Tell me your day to day activities.
3. Tell me your roles and responsibilities.
4. How many servers in your environment 
5. How many of your team size
6. what is your role means Designation
7. how along you are working on devops
8. How much rating you wll give On DevOps, AWS
9. Which scripting Language you use for automation either shell or python
10. How much rationg you will give on scripting
11. Which versions using in your environment
12. Which ticketing tool you are using in you environment
13. which versions you are using in devops


Git: 

1. what is the difference between git pull and git clone
2. what is the difference between git pull and git fetch

3. what is staging area in git. :

R- These files are also referred to as "untracked files." Staging area is files that are going to be a part of the next commit, 
   which lets git know what changes in the file are going to occur for the next commit. The repository contains all of a project's commits.
   
4. what is git stash? :

R- The git stash command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts
   them from your working copy. It is used to back up 

5. what is reset in git? :

R- It is used to reset git or go back to your working area

6. What is the difference between HEAD and checkout in git :

R- Remember that the HEAD is Git's way of referring to the current snapshot. Internally, the git checkout command simply 
   updates the HEAD to point to either the specified branch or commit. When it points to a branch, Git doesn't complain,
   but when you check out a commit, it switches into a “detached HEAD” state.

7. Have you configured github repository locally


Jenkins: 

1. How to upload the .json file in jenkins
2. How to send the mail when build is unstable or broken
3. How to store the jenkins server backup and restore
4. How to take .xml files backup
5. How to set the jenkins job build numbers
6. What we can do with jenkins
7. Why we are using jenkins
 Ans) We can build, autodeploy, test the projects, send the notification....
8.   Do we need to install jenkins in nodes
9.   How you can write and execute the shell script in jenkins
10. How to manage the nodes, how to manage the users, how we can create perticular project based authentications in jenkins.
11. How I can integrate the LDAP using jenkins
12. why we use nodes in jenkins
13. How to configure windows agents in jenkins
14. How to reduce the build time in jenkins
15. I configured one project in jenkins I'm trying to configure anothe project but it's not getting added how you will trouble shoot.
16. What are the artifacts in jenkins
17. What are the artifacts in jenkins
18. How you will give the customized build numbers in jenkins
19. How you will send the notifications wether build is fail or success
20. what is the pipe line project in jenkins
21. what is the system type of jenkins server like t2 micro t2 medium.
22. what is the stages of your jenkins project like pipe line project
23. How will you give authentication permissions to the users in jenkins
24. I have upgraded from one version to another version in jenkins after upgrading some of my upgraded plugins are not supporting to new version of
      Jenkins then what you will do.
25. How you will decide no of executors in jenkins
26. How to reduce build time in pipeline project
27. How set maven deployment path
28. How to define no of executors in Jenkins

#############################################################################
###############          AWS
#############################################################################

What is your experience with Aws?:
R: I have experience on aws deploying a wordpress website that involve many aws service such as 
   Vpc with public and private subnet, security group, ec2 instance, Rds, EFS  and others
  - so i have been able to create a wordpress website that will be hosted in ec2
  - i have connected it with amazon RDS database
  - I have made it publicly accessible over the internet

  I have built a serverless web application on AWS using a bunch aws service like aws lambda,
    api-gateway, aws amplified. In that project our goal was to build and run an application 
    without have to manage infrastructure. That helps my company to reduce time to provision and maintaining
     infrastructure for our application.


1.   How to increase the root volume size of your ec2 instance.
# EBS volume can be expanded using Amazon EC2 console or AWS CLI 
# by default and can be extended up to 2 TB
2.   How to increase the root volume of your ec2 instance without changing instance ip address
3.   How to scale instances timings base using autoscaling
4.   How to configure ELB in AWS
5.   What is sticky session ELB in AWS
6.   How will you configure sticky session
7.   How to upload SSL certificates in ELB
8.   What is cross balancing in ELB
9.   How to delete the one year old files in s3 bucket in AWS
10. what is Classic ELB
11. What is Application ELB
12. What is the difference between classic and Application ELB
13. How to redirect the https in ELB
14. How to deploy or copy the application on autoscaling
15. What life cycle in S3
16. Have worked on spot instances
17. What is cloud formation
18. What is CloudFront
19. What is public subnet and private subnet in aws
20. what are the challenges you faced while migrating servers from physical to cloud
21. What is RDS in aws and how will you launch RDS in instance in AWS and how will you connect it.
22. Difference between private cloud and public cloud
23. What is EC2, S3, ELB, Autoscaling, Cloudforamtion, CloudFront.
24. I want to stop 24 hours mysql database instance how you will stop it.
25. how to configure ELB health checks
26. what is the difference between AMI and Snapshot
27. I want to configure ELB with one instance does it work
28. which mysql versions are available in RDS
29. what is VPC in AWS and what is the use of VPC and how will you create public, private subnets and NAT instances and gateways
30. What are the terminologies available in route53
31. IAM policies
32. what is the mechanism of ELB
33. what is the mechanism of Autoscaling group
34. How will you provide ec2 instance key to users are you using any protocall for this
35.   

Ansible: 

1. Have you worked on ansible
2. Which Scripting used in Ansible
3. How do you secure your environment in ansible
4. How do you skip a task in ansible
5. Which file is used for your default configuration in ansible?
6. What are ansible best practices?

Docker: is a software platform that allows you build , test, and deploy applications quickly.

 1. How you will build the your own docker images
 R-
Create a Docker image from an existing container: In this case, you start with an existing image,
customize it with the changes you want, then build a new image from it. 
Use a Dockerfile: In this case, you use a file of instructions — the Dockerfile — to specify the base image and the changes you want to make to it.
 
 2. How to find background process in docker containers
  R- docker ps -a 
  
 3. what is docker swarm
   A docker swarm : is comprised of a group of physical or virtual machines operating in a cluster. When a machine joins the cluster,
   it becomes a node in that swarm. The docker swarm function recognizes three different types of nodes, each with a different 
   role within the docker swarm ecosystem.
   
   How Does Docker Swarm Work? : 
   In Swarm, containers are launched using services. A service is a group of containers of the same 
   image that enables the scaling of applications. Before you can deploy a service in Docker Swarm, you must have at least one
   node deployed. 
   There are two types of nodes in Docker Swarm:

Manager node. Maintains cluster management tasks 
Worker node. Receives and executes tasks from the manager node
Consider a situation where a manager node sends out commands to different worker nodes.

Features of Docker Swarm
Some of the most essential features of Docker Swarm are:

Decentralized access: Swarm makes it very easy for teams to access and manage the environment 
High security: Any communication between the manager and client nodes within the Swarm is highly secure 
Autoload balancing: There is autoload balancing within your environment, and you can script that into how you
   write out and structure the Swarm environment 
High scalability: Load balancing converts the Swarm environment into a highly scalable infrastructure
Roll-back a task: Swarm allows you to roll back environments to previous safe environments

In summary, the main difference between both platforms is that Docker Swarm is lightweight and more beginner-friendly, 
while Kubernetes is heavy and complex. Developers looking for a middle ground might want to consider a new platform, K3s.
K3s eliminates the complexity of Kubernetes and provides a lighter, more accessible experience.
 
   Docker Compose :
 
4. Which applications are running in your docker containers
5. what is entry poind and command in in docker
6. In docker-compose one of my instance is down then how will you troubleshoot
7. what is the difference between vm and docker
8. Is docker image as iso or is there any else
9. How containers share memory by baremetalbox or some where else
Linux:

1. I have 100GB space in my '/' directory I'm trying to create files or directories in '/' directory I'm getting error called you dont have space,
then what could be the reason
Ans) Inode full
2. Shift  A guy created filesystem and mount it to /tmp, shift B guy trying to create files and directories in /tmp, but he is unable to create files or dir's
then what could be the reason
Ans) May be filesystem is in read only mode
3. what is the difference between useradd and adduser commands in linux
4. what is logrotate how will you create logrotate for apache
5. what is swap
6. how to check swap space
free, free -m
7. Is swap space must need while installing linux os
8. what is the use of iostat and vmstat commands
8. what are the columns and rows in vmstat, iostat, top commands
9. what are the run levels in linux
10. what is system storage management(ssm)
11. how to upgrade rhel6 to 7
12. which versions of packages you installed like nginx, apache, httpd..
13. what is nginx

10. How containers will get volumes

######################################################################
##############       Terraform
######################################################################

#1. What is terraform?

 Terraform is a popular open source Infrastructure as Code (IAC) tool that automates provisioning of your infrastructure 
 in the cloud and manages the full lifecycle of all deployed resources, which are defined in source code. Its resource-managing 
 behavior is predictable and reproducible, so you can plan the actions in advance and reuse your code configurations for similar
 infrastructure. It  facilitates the process of creating and deploying reusable and scalable infrastructure architectures.
 it helps to have a control over complete orchestration much like puppet and ansible.

#2. Why is terraform is used for Devops?

  - It can do complete orchestration and not just configuration management
  - It support of almost all the popular cloud providers like aws, azure, Gcp.
  - Easily manages the configuration of an immutable (dynamic) infrastructure
  - provide immutable infrastructure were configuration changes smoothly
  - works on HCL, which is a very easy to learn and understand
  - easily portable from one provider to another
  - easy installation 

#3. What is terraform init?

  terrafrom initializes the code using terraform init. It is ysed to initializethe working directory
  containing terraform configuration file. The command will install plugins, install child modules and backend 
  initialization

#4. How does terraform works?

  terraform has a lifecycle to create resource 
   - terraform init : used to create an operational directory
   - terraform plan : implements an execution plan
   - terraform apply : ensures that the plan is set in motion in the time-frame
   - terraform destroy : used to eliminate all the applied resources  
   

#5. define null resource in terraform

  null_resource implements standard resource library. But no futher action is taken.
  The triggers argument allows an arbitrary set of values that will cause the replacement of resources when changed.

#6. How to check the install version of terraform ?

To check the version do 
terraform --version

#7. What is a provider in terraform? Enlist some terraform providers

  Terraform provider is responsible for understanding API interactions and exposing resources.
  Providers generally are an Iaas (aws,gcp, azure), or Saas services (terraform cloud, cloudfare),
  Paas (heroku).

#8. What  is a modules in terraform?

  A module is a container for several resources that are used together. The root module is compulsory
  for every terraform that includes resources mentioned  in the tf files.

#9. what is the remote backend in terraform?








